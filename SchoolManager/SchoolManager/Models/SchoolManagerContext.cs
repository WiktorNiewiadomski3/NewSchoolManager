// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using SchoolManager.Enums;
using System;
using System.Collections.Generic;
using System.Linq;

#nullable disable

namespace SchoolManager.Models
{
    public partial class SchoolManagerContext : DbContext
    {
        public SchoolManagerContext()
        {
            Database.EnsureCreated();
        }

        public SchoolManagerContext(DbContextOptions<SchoolManagerContext> options)
            : base(options)
        {
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            string connectionString = @"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=master;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False";

            optionsBuilder.UseSqlServer(connectionString);
        }

        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<Grade> Grades { get; set; }
        public virtual DbSet<Parent> Parents { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
        public List<User> Users
        {
            get
            {
                List<Teacher> allTeachers = Teachers.ToList();
                List<Parent> allParents = Parents.ToList();
                List<Student> allStudents = Students.ToList();

                List<User> users = new List<User>();

                foreach (Teacher teacher in allTeachers)
                {
                    teacher.Type = UserTypes.Teacher;
                    users.Add(teacher);
                }

                foreach (Parent parent in allParents)
                {
                    parent.Type = UserTypes.Parent;
                    users.Add(parent);
                }

                foreach (Student student in allStudents)
                {
                    student.Type = UserTypes.Student;
                    users.Add(student);
                }

                return users;
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Class>(entity =>
            {
                entity.ToTable("CLASSES");

                entity.HasOne(d => d.Teacher)
                    .WithMany(p => p.Classes)
                    .HasForeignKey(d => d.TeacherId)
                    .HasConstraintName("FK_CLASSES_ToTable");
            });

            modelBuilder.Entity<Grade>(entity =>
            {
                entity.ToTable("GRADES");

                entity.HasOne(d => d.Subject)
                    .WithMany(p => p.Grades)
                    .HasForeignKey(d => d.SubjectId)
                    .HasConstraintName("FK_GRADES_ToTable");
            });

            modelBuilder.Entity<Parent>(entity =>
            {
                entity.ToTable("PARENTS");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.ToTable("STUDENTS");

                entity.HasOne(d => d.Class)
                    .WithMany(p => p.Students)
                    .HasForeignKey(d => d.ClassId)
                    .HasConstraintName("FK_STUDENTS_ToTable_1");

                entity.HasOne(d => d.Parent)
                    .WithMany(p => p.Students)
                    .HasForeignKey(d => d.ParentId)
                    .HasConstraintName("FK_STUDENTS_ToTable");
            });

            modelBuilder.Entity<Subject>(entity =>
            {
                entity.ToTable("SUBJECTS");

                entity.HasOne(d => d.Student)
                    .WithMany(p => p.Subjects)
                    .HasForeignKey(d => d.StudentId)
                    .HasConstraintName("FK_SUBJECTS_STUDENTS");
            });

            modelBuilder.Entity<Teacher>(entity =>
            {
                entity.ToTable("TEACHERS");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);

        public void EnsureDatabaseIsPopulatedWithData()
        {
            bool noUsersInDatabase = Users.Count == 0;

            if (noUsersInDatabase)
            {
                RemoveAllDatabaseData();
                PopulateDatabaseWithData();
            }
        }

        private void RemoveAllDatabaseData()
        {
            Classes.RemoveRange(Classes.ToList());
            Grades.RemoveRange(Grades.ToList());
            Parents.RemoveRange(Parents.ToList());
            Students.RemoveRange(Students.ToList());
            Subjects.RemoveRange(Subjects.ToList());
            Teachers.RemoveRange(Teachers.ToList());
            SaveChanges();
        }

        private void PopulateDatabaseWithData()
        {
            Teacher teacher1 = new Teacher { Name = "Erwin", Surname = "Śnieżek", Login = "t1", Password = "t1" };
            Teacher teacher2 = new Teacher { Name = "Antoni", Surname = "Norman", Login = "t2", Password = "t2" };
            Teacher teacher3 = new Teacher { Name = "Borys", Surname = "Wełz", Login = "t2", Password = "t2" };

            Parent parent1 = new Parent { Name = "Genia", Surname = "Torba", Login = "p1", Password = "p1" };
            Parent parent2 = new Parent { Name = "Andrzej", Surname = "Polak", Login = "p2", Password = "p2" };
            Parent parent3 = new Parent { Name = "Przemysław", Surname = "Sikora", Login = "p3", Password = "p3" };
            Parent parent4 = new Parent { Name = "Jędrzej", Surname = "Nowak", Login = "p4", Password = "p4" };
            Parent parent5 = new Parent { Name = "Andrzej", Surname = "Duda", Login = "p5", Password = "p5" };
            Parent parent6 = new Parent { Name = "Donald", Surname = "Tusk", Login = "p6", Password = "p6" };

            Student student1 = new Student { Name = "Andrzej", Surname = "Worek", Login = "s1", Password = "s1", Parent = parent1 };
            Student student2 = new Student { Name = "Tomek", Surname = "Plecy", Login = "s2", Password = "s2", Parent = parent2 };
            Student student3 = new Student { Name = "Monika", Surname = "Palec", Login = "s3", Password = "s3", Parent = parent3 };
            Student student4 = new Student { Name = "Alicja", Surname = "Nóż", Login = "s4", Password = "s4", Parent = parent4 };
            Student student5 = new Student { Name = "Maciej", Surname = "Łyżka", Login = "s5", Password = "s5", Parent = parent5 };
            Student student6 = new Student { Name = "Jacek", Surname = "Dąb", Login = "s6", Password = "s6", Parent = parent6 };
            Student student7 = new Student { Name = "Ełstachy", Surname = "Korek", Login = "s7", Password = "s7", Parent = parent1 };
            Student student8 = new Student { Name = "Włodziu", Surname = "But", Login = "s8", Password = "s8", Parent = parent2 };
            Student student9 = new Student { Name = "Eryk", Surname = "Laczek", Login = "s9", Password = "s9", Parent = parent3 };
            Student student10 = new Student { Name = "Jan", Surname = "Dywan", Login = "s10", Password = "s10", Parent = parent4 };
            Student student11 = new Student { Name = "Basia", Surname = "Oko", Login = "s11", Password = "s11", Parent = parent5 };
            Student student12 = new Student { Name = "Kasia", Surname = "Kleks", Login = "s12", Password = "s12", Parent = parent6 };

            Class class1 = new Class { Name = "2A", Teacher = teacher1 };
            class1.Students.Add(student1);
            class1.Students.Add(student3);
            class1.Students.Add(student5);
            class1.Students.Add(student7);
            class1.Students.Add(student9);
            class1.Students.Add(student11);

            Class class2 = new Class { Name = "1C", Teacher = teacher2 };
            class2.Students.Add(student2);
            class2.Students.Add(student4);
            class2.Students.Add(student6);
            class2.Students.Add(student8);
            class2.Students.Add(student10);
            class2.Students.Add(student12);

            teacher1.Classes.Add(class1);
            teacher2.Classes.Add(class2);

            List<Student> students = new List<Student>
            {
                student1,
                student2,
                student3,
                student4,
                student5,
                student6,
                student7,
                student8,
                student9,
                student10,
                student11,
                student12
            };

            foreach (Student student in students)
            {
                CreateSubjectwithRandomGrades("Matematyka", student);
                CreateSubjectwithRandomGrades("Fizyka", student);
                CreateSubjectwithRandomGrades("Polski", student);
                CreateSubjectwithRandomGrades("Chemia", student);
                CreateSubjectwithRandomGrades("Angielski", student);
            }

            Classes.Add(class1);
            Classes.Add(class2);

            Teachers.Add(teacher3);

            SaveChanges();
        }

        private void CreateSubjectwithRandomGrades(string subjectName, Student student)
        {
            int gradesCount = GetRandomNumber(1, 10);

            Subject subject = new Subject { Name = subjectName };

            for (int i = 0; i < gradesCount; i++)
            {
                Grade grade = new Grade { Value = GetRandomNumber(1, 6) };
                subject.Grades.Add(grade);
            }

            student.Subjects.Add(subject);
        }

        private object _lock = new object();
        private Random _random = new Random();
     private int GetRandomNumber(int from, int to)
        {
            lock (_lock)
            {
                int randomGrade = _random.Next(from, to + 1);

                return randomGrade;
            }
        }   
    }
}